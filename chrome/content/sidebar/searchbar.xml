<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE bindings SYSTEM "chrome://hatenabookmark/locale/addPanel.dtd">
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="searchbar">
        <resources>
            <stylesheet src="searchbar.css"/>
            <stylesheet src="chrome://browser/skin/searchbar.css"/>
        </resources>

        <content>
            <xul:textbox anonid="textbox"
                         class="searchbar-textbox"
                         flex="1">
                <xul:button anonid="modeButton"
                            class="searchbar-engine-button"
                            type="menu">
                    <xul:image anonid="modeImage"
                               class="searchbar-engine-image"/>
                    <xul:image class="searchbar-dropmarker-image"/>
                    <xul:menupopup anonid="popup"
                                   class="searchbar-popup"
                                   oncommand="_doPopupCommand(event);"
                                   xbl:inherits="position=popupposition">
                        <xul:menuitem class="hBookmark-searchbar-mode-menuitem menuitem-iconic"
                                      label="{{ブックマークを検索}}"
                                      value="all"/>
                        <xul:menuitem class="hBookmark-searchbar-mode-menuitem menuitem-iconic"
                                      label="{{タイトルから検索}}"
                                      value="title"/>
                        <xul:menuitem class="hBookmark-searchbar-mode-menuitem menuitem-iconic"
                                      label="{{コメントから検索}}"
                                      value="comment"/>
                        <xul:menuitem class="hBookmark-searchbar-mode-menuitem menuitem-iconic"
                                      label="{{URL から検索}}"
                                      value="url"/>
                    </xul:menupopup>
                </xul:button>
                <xul:hbox class="search-go-container">
                    <xul:image anonid="goButton"
                               class="search-go-button"
                               tooltiptext="{{検索}}"
                               onclick="_dispatchInputEvent();"/>
                </xul:hbox>
            </xul:textbox>
        </content>

        <implementation>
            <constructor><![CDATA[
                let searchMode = this.searchMode;
                let menuitem = this.popup.firstChild;
                for (; menuitem; menuitem = menuitem.nextSibling)
                    if (menuitem.value === searchMode) break;
                if (menuitem) {
                    menuitem.setAttribute('selected', 'true');
                    this._selectedMenuitem = menuitem;
                    this._setMode(menuitem);
                }
            ]]></constructor>

            <field name="textbox">document.getAnonymousElementByAttribute(
                this, 'anonid', 'textbox')</field>
            <field name="modeButton">document.getAnonymousElementByAttribute(
                this, 'anonid', 'modeButton')</field>
            <field name="modeImage">document.getAnonymousElementByAttribute(
                this, 'anonid', 'modeImage')</field>
            <field name="popup">document.getAnonymousElementByAttribute(
                this, 'anonid', 'popup')</field>
            <field name="goButton">document.getAnonymousElementByAttribute(
                this, 'anonid', 'goButton')</field>

            <field name="_selectedMenuitem">null</field>

            <property name="searchMode"
                      onget="return this.getAttribute('searchmode');"
                      onset="this.setAttribute('searchmode', val); return val;"/>

            <method name="_setMode">
                <parameter name="menuitem"/>
                <body><![CDATA[
                    this.searchMode = menuitem.value;
                    this.textbox.emptyText = menuitem.label;
                    this.textbox.tooltipText = menuitem.label;

                    let imageStyle = this.modeImage.style;
                    imageStyle.listStyleImage = '';
                    imageStyle.MozImageRegion = '';
                    this.modeImage.src = '';
                    if (menuitem.image) {
                        this.modeImage.src = menuitem.image;
                    } else {
                        let style = getComputedStyle(menuitem, null);
                        imageStyle.listStyleImage = style.listStyleImage;
                        imageStyle.MozImageRegion = style.MozImageRegion;
                    }
                ]]></body>
            </method>

            <method name="_doPopupCommand">
                <parameter name="event"/>
                <body><![CDATA[
                    let menuitem = event.target;
                    if (menuitem === this._selectedMenuitem) return;
                    if (this._selectedMenuitem)
                        this._selectedMenuitem.removeAttribute('selected');
                    menuitem.setAttribute('selected', 'true');
                    this._selectedMenuitem = menuitem;
                    this._setMode(event.target);
                ]]></body>
            </method>

            <method name="_dispatchInputEvent">
                <body><![CDATA[
                    let event = document.createEvent('UIEvent');
                    event.initUIEvent('input', true, false, window, 0);
                    this.textbox.inputField.dispatchEvent(event);
                ]]></body>
            </method>
        </implementation>
    </binding>

    <binding id="searchbar-textbox"
             extends="chrome://global/content/bindings/autocomplete.xml#autocomplete">
        <implementation>
            <constructor><![CDATA[
            ]]></constructor>
        </implemenation>
    </binding>

</bindings>
