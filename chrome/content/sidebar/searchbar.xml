<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE bindings SYSTEM "chrome://hatenabookmark/locale/sidebar.dtd">
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="searchbar">
        <resources>
            <stylesheet src="searchbar.css"/>
            <stylesheet src="chrome://browser/skin/searchbar.css"/>
            <stylesheet src="chrome://hatenabookmark/skin/searchbar.css"/>
        </resources>

        <content>
            <xul:textbox anonid="textbox"
                         class="searchbar-textbox"
                         flex="1">
                <xul:button anonid="modeButton"
                            class="searchbar-engine-button"
                            type="menu">
                    <xul:image anonid="modeImage"
                               class="searchbar-engine-image"/>
                    <xul:image class="searchbar-dropmarker-image"/>
                    <xul:menupopup anonid="popup"
                                   class="searchbar-popup"
                                   oncommand="_onPopupCommand(event);"
                                   xbl:inherits="position=popupposition">
                        <xul:menuitem class="hBookmark-searchbar-mode-menuitem menuitem-iconic"
                                      label="&hBookmark.sidebar.search.searchAllLabel;"
                                      accesskey="&hBookmark.sidebar.search.searchAllKey;"
                                      value="all"/>
                        <xul:menuitem class="hBookmark-searchbar-mode-menuitem menuitem-iconic"
                                      label="&hBookmark.sidebar.search.searchTitleLabel;"
                                      accesskey="&hBookmark.sidebar.search.searchTitleKey;"
                                      value="title"/>
                        <xul:menuitem class="hBookmark-searchbar-mode-menuitem menuitem-iconic"
                                      label="&hBookmark.sidebar.search.searchCommentLabel;"
                                      accesskey="&hBookmark.sidebar.search.searchCommentKey;"
                                      value="comment"/>
                        <xul:menuitem class="hBookmark-searchbar-mode-menuitem menuitem-iconic"
                                      label="&hBookmark.sidebar.search.searchURLLabel;"
                                      accesskey="&hBookmark.sidebar.search.searchURLKey;"
                                      value="url"/>
                    </xul:menupopup>
                </xul:button>
                <xul:hbox anonid="goContainer"
                          class="search-go-container">
                    <!--
                    <xul:image anonid="goButton"
                               class="search-go-button"
                               tooltiptext="&hBookmark.sidebar.search.goLabel;"
                               onclick="dispatchInputEvent();"/>
                    -->
                </xul:hbox>
            </xul:textbox>
        </content>

        <implementation>
            <constructor><![CDATA[
                if (hBookmark.IS_MAC)
                    this.goContainer.className += ' mac';
                this.searchMode = this.searchMode ||
                                  this._prefs.get('sidebar.searchMode');
            ]]></constructor>

            <field name="textbox">document.getAnonymousElementByAttribute(
                this, 'anonid', 'textbox')</field>
            <field name="modeButton">document.getAnonymousElementByAttribute(
                this, 'anonid', 'modeButton')</field>
            <field name="modeImage">document.getAnonymousElementByAttribute(
                this, 'anonid', 'modeImage')</field>
            <field name="popup">document.getAnonymousElementByAttribute(
                this, 'anonid', 'popup')</field>
            <field name="goContainer">document.getAnonymousElementByAttribute(
                this, 'anonid', 'goContainer')</field>
            <field name="goButton">document.getAnonymousElementByAttribute(
                this, 'anonid', 'goButton')</field>

            <property name="value"
                      onget="return this.textbox.value;"
                      onset="return this.textbox.value = val;"/>

            <method name="focus">
                <body><![CDATA[
                    this.textbox.focus();
                ]]></body>
            </method>

            <method name="select">
                <body><![CDATA[
                    this.textbox.select();
                ]]></body>
            </method>

            <field name="_prefs">hBookmark.Prefs.bookmark</field>
            <field name="_selectedMenuitem">null</field>

            <property name="searchMode"
                      onget="return this.getAttribute('searchmode');">
                <setter><![CDATA[
                    let menuitem = this.popup.firstChild;
                    for (; menuitem; menuitem = menuitem.nextSibling)
                        if (menuitem.value === val) break;
                    if (!menuitem || menuitem === this._selectedMenuitem)
                        return val;

                    this.textbox.emptyText = menuitem.label;
                    this.textbox.tooltipText = menuitem.label;
                    let imageStyle = this.modeImage.style;
                    imageStyle.listStyleImage = '';
                    imageStyle.MozImageRegion = '';
                    this.modeImage.src = '';
                    if (menuitem.image) {
                        this.modeImage.src = menuitem.image;
                    } else {
                        let style = getComputedStyle(menuitem, null);
                        imageStyle.listStyleImage = style.listStyleImage;
                        imageStyle.MozImageRegion = style.MozImageRegion;
                    }
                    if (this._selectedMenuitem)
                        this._selectedMenuitem.removeAttribute('selected')
                    menuitem.setAttribute('selected', 'true');
                    this._selectedMenuitem = menuitem;

                    this.setAttribute('searchmode', val);
                    this._prefs.set('sidebar.searchMode', val);
                    let event = document.createEvent('Event');
                    event.initEvent('HB.SearchModeChanged', true, false);
                    this.dispatchEvent(event);
                    return val;
                ]]></setter>
            </property>

            <method name="switchSearchMode">
                <parameter name="forward"/>
                <body><![CDATA[
                    let menuitem = this._selectedMenuitem &&
                        (forward ? this._selectedMenuitem.nextSibling
                                 : this._selectedMenuitem.previousSibling);
                    if (!menuitem) return false;
                    this.searchMode = menuitem.value;
                    return true;
                ]]></body>
            </method>

            <method name="openSearchModePopup">
                <body><![CDATA[
                    this.modeButton.open = true;
                ]]></body>
            </method>

            <method name="dispatchInputEvent">
                <body><![CDATA[
                    let event = document.createEvent('UIEvent');
                    event.initUIEvent('input', true, false, window, 0);
                    this.textbox.inputField.dispatchEvent(event);
                ]]></body>
            </method>

            <method name="_onPopupCommand">
                <parameter name="event"/>
                <body><![CDATA[
                    this.searchMode = event.target.value;
                    this.select();
                ]]></body>
            </method>
        </implementation>
    </binding>

    <binding id="searchbar-textbox"
             extends="chrome://global/content/bindings/autocomplete.xml#autocomplete">
        <implementation>
            <field name="parent">document.getBindingParent(this)</field>
        </implementation>

        <handlers>
            <handler event="keypress" phase="capturing" keycode="VK_RETURN"
                     action="this.parent.dispatchInputEvent();"/>
            <handler event="keypress" phase="capturing"
                     keycode="VK_UP" modifiers="accel"
                     action="this.parent.switchSearchMode(false);"/>
            <handler event="keypress" phase="capturing"
                     keycode="VK_DOWN" modifiers="accel"
                     action="this.parent.switchSearchMode(true);"/>
            <handler event="keypress" phase="capturing"
                     keycode="VK_UP" modifiers="alt"
                     action="this.parent.openSearchModePopup(); return false;"/>
            <handler event="keypress" phase="capturing"
                     keycode="VK_DOWN" modifiers="alt"
                     action="this.parent.openSearchModePopup(); return false;"/>
            <handler event="keypress" phase="capturing" keycode="VK_F4"><![CDATA[
                if (hBookmark.IS_MAC) {
                    this.parent.openSearchModePopup();
                    return false;
                }
                return true;
            ]]></handler>
        </handlers>
    </binding>

</bindings>
