<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE bindings SYSTEM "chrome://hatenabookmark/locale/addPanel.dtd">
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="add-panel"
             extends="chrome://global/content/bindings/popup.xml#panel">
        <content>
            <xul:label anonid="errorField" hidden="true"/>
            <xul:grid>
                <xul:columns>
                    <xul:column/>
                    <xul:column flex="1"/>
                </xul:columns>
                <xul:rows>
                    <xul:row align="center" class="username-line">
                        <xul:hbox pack="end">
                        <!--
                        <xul:image src="chrome://hatenabookmark/content/skin/images/favicon.ico" height="16px" width="16px" />
                        -->
                        <xul:label value="&hBookmark.addPanel.welcomeUserLabel.before;" />
                        </xul:hbox>
                        <xul:hbox align="center">
                            <xul:image anonid="userIcon"/>
                            <xul:label anonid="userNameField"
                                       class="text-link hBookmarkLink"/>
                            <xul:label value="&hBookmark.addPanel.welcomeUserLabel.after;" />
                        </xul:hbox>
                    </xul:row>
                    <xul:row anonid="messageRow">
                        <xul:spacer/>
                        <xul:label anonid="messageField"/>
                    </xul:row>
                    <xul:row align="center">
                        <xul:label value="&hBookmark.addPanel.titleLabel;"/>
                        <xul:vbox>
                            <xul:hbox anonid="titleContainer"
                                      align="center">
                                <xul:image anonid="titleIcon"/>
                                <xul:label crop="end" flex="1" anonid="titleLabel"/>
                                <xul:button anonid="editTitleButton"
                                            label="&hBookmark.addPanel.editTitleLabel;"
                                            oncommand="document.getBindingParent(this).isTitleEditable = true;"/>
                            </xul:hbox>
                            <xul:hbox anonid="editableTitleContainer"
                                      align="center">
                                <xul:textbox anonid="titleField" flex="1"/>
                                <xul:button anonid="cancelEditTitleButton"
                                            label="&hBookmark.addPanel.cancelEditTitleLabel;"
                                            oncommand="document.getBindingParent(this).isTitleEditable = false;"/>
                            </xul:hbox>
                        </xul:vbox>
                    </xul:row>
                    <xul:row align="center">
                        <xul:label value="&hBookmark.addPanel.urlLabel;"/>
                        <xul:label anonid="urlField"
                                   class="text-link hBookmarkLink"
                                   crop="end"/>
                    </xul:row>
                    <xul:row anonid="usersRow" align="center">
                        <xul:spacer/>
                        <xul:label anonid="usersField"
                                   class="text-link hBookmarkLink"/>
                    </xul:row>
                    <xul:row align="center">
                        <xul:label value="&hBookmark.addPanel.commentLabel;"/>
                        <xul:textbox
                            anonid="commentField"
                            class="hBookmarkMyTagComplete"
                        />
                    </xul:row>
                </xul:rows>
            </xul:grid>
            <xul:groupbox anonid="tagSelectorGroup">
                <xul:caption label="&hBookmark.addPanel.frequentTagsLabel;"/>
                <xul:hbox anonid="tagSelector"
                          class="hBookmarkTagSelector"/>
            </xul:groupbox>
        </content>

        <implementation>
            <constructor><![CDATA[
                let backgroundImage = Application.prefs.get('extensions.hatenabookmark.addPanel.backgroundImage').value;
                let w = document.getElementById('hBookmarkAddPanelWindow');
                w.style.backgroundColor = '#FFF';
                if (backgroundImage) {
                    backgroundImage = 'file:///' + encodeURIComponent(backgroundImage);
                    w.style.backgroundImage = "url('" + backgroundImage + "')";
                    w.style.backgroundRepeat = 'no-repeat';
                    w.style.backgroundPosition = 'left bottom';
                }
                this.inputHandler = new hBookmark.TagCompleter.InputHandler(this.commentField.inputField);
            ]]></constructor>

            <field name="userIcon">
                document.getAnonymousElementByAttribute(this, "anonid", "userIcon")
            </field>
            <field name="userNameField">
                document.getAnonymousElementByAttribute(this, "anonid", "userNameField")
            </field>
            <field name="messageRow">
                document.getAnonymousElementByAttribute(this, "anonid", "messageRow")
            </field>
            <field name="messageField">
                document.getAnonymousElementByAttribute(this, "anonid", "messageField")
            </field>
            <field name="titleContainer">
                document.getAnonymousElementByAttribute(this, "anonid", "titleContainer")
            </field>
            <field name="editableTitleContainer">
                document.getAnonymousElementByAttribute(this, "anonid", "editableTitleContainer")
            </field>
            <field name="titleIcon">
                document.getAnonymousElementByAttribute(this, "anonid", "titleIcon")
            </field>
            <field name="titleLabel">
                document.getAnonymousElementByAttribute(this, "anonid", "titleLabel")
            </field>
            <field name="titleField">
                document.getAnonymousElementByAttribute(this, "anonid", "titleField")
            </field>
            <field name="editTitleButton">
                document.getAnonymousElementByAttribute(this, "anonid", "editTitleButton")
            </field>
            <field name="cancelEditTitleButton">
                document.getAnonymousElementByAttribute(this, "anonid", "cancelEditTitleButton")
            </field>
            <field name="urlField">
                document.getAnonymousElementByAttribute(this, "anonid", "urlField")
            </field>
            <field name="usersRow">
                document.getAnonymousElementByAttribute(this, "anonid", "usersRow")
            </field>
            <field name="usersField">
                document.getAnonymousElementByAttribute(this, "anonid", "usersField")
            </field>
            <field name="commentField">
                document.getAnonymousElementByAttribute(this, "anonid", "commentField")
            </field>
            <field name="tagSelector">
                document.getAnonymousElementByAttribute(this, "anonid", "tagSelector")
            </field>
            <field name="tagSelectorGroup">
                document.getAnonymousElementByAttribute(this, "anonid", "tagSelectorGroup")
            </field>
            <field name="errorField">
                document.getAnonymousElementByAttribute(this, "anonid", "errorField")
            </field>
            <field name="dialog">
                document.documentElement

            </field>

            <field name="strings">
                new hBookmark.Strings("chrome://hatenabookmark/locale/addPanel.properties")
            </field>

            <field name="_tags">[]</field>
            <field name="_bookmark">({ title: "", url: "", comment: "" })</field>
            <property name="bookmark">
                <getter><![CDATA[
                    return hBookmark.extend(this._bookmark, {
                        title:   this.titleField.value,
                        url:     this.urlField.value,
                        comment: this.commentField.value
                    });
                ]]></getter>
                <setter><![CDATA[
                    if (val.url !== this._bookmark.url)
                        this.updateFields(val);
                    return this._bookmark = val;
                ]]></setter>
            </property>

            <property name="isTitleEditable"
                      onget="return !this.titleField.readOnly;">
                <setter><![CDATA[
                    this.titleContainer.hidden = val;
                    this.editableTitleContainer.hidden = !val;
                    if (val)
                        this.titleField.focus();
                    else
                        this.titleField.value = this.titleLabel.value;
                    return val;
                ]]></setter>
            </property>

            <property name="isTitleChanged" readonly="true"
                      onget="return this.titleField.value !== this.titleLabel.value;"/>

            <method name="show">
                <parameter name="bookmark"/>
                <body><![CDATA[
                    this.bookmark = bookmark;
                    this.setAddOrEdit(!!bookmark.temporary, bookmark);
                    this.clearError();
                    // 遅延しないとうまく focus があたらない？
                    // これでもタイミング次第では focus あわないので:w
                    // panel の表示にあわせて focus したほうがよいかも
                    setTimeout(function(self) {
                    self.commentField.focus();
                    }, 10, this);
                ]]></body>
            </method>

            <method name="hide">
                <body><![CDATA[
                    this.dialog.cancelDialog();
                ]]></body>
            </method>

            <method name="updateFields">
                <parameter name="bookmark"/>
                <body><![CDATA[
                    let user = hBookmark.User.user;

                    this.userIcon.src        = user.getProfileIcon(false);
                    this.userNameField.value = user.name;
                    this.userNameField.href  = user.bookmarkHomepage;

                    this.titleIcon.src = hBookmark.favicon(bookmark.url);
                    this.titleLabel.value       = bookmark.title;
                    this.titleField.value       = bookmark.title;
                    this.editTitleButton.hidden = user.private;
                    this.isTitleEditable        = false;

                    this.urlField.value = bookmark.url;
                    this.urlField.href =
                        hBookmark.UIUtils.isSafeLink(bookmark.url)
                        ? bookmark.url : "";
                    this.usersRow.hidden = true;

                    this.commentField.value = bookmark.comment;
                    this.inputHandler.updateLineValue(); // タグを認識させる

                    setTimeout(function (self) {
                        let res = hBookmark.HTTPCache.entry.get(bookmark.url);
                        if (res && typeof res.title != 'undefined') {
                            self.usersField.value =
                                hBookmark.UIUtils.getUsersText(res.count);
                            self.usersField.href = res.entry_url;
                            self.usersRow.hidden = false;

                            if (res.title === bookmark.title) return;
                            self.titleLabel.value = res.title;
                            self.titleField.value = res.title;
                        } else if (!bookmark.title) {
                            let xhr = hBookmark.net.get(bookmark.url);
                            // とりあえずやっつけ
                            // loading icon だしたほうがよさそう
                            let m = (xhr.responseText || '').match(new RegExp('<title>(.+)</title>', 'i'));
                            if (m) {
                                self.titleLabel.value = m[1];
                            }
                        }
                    }, 0, this);

                    // XXX Prefs#getは"."が入るとうまくいかない?
                    //let count = hBookmark.Prefs.bookmark.get("addPanel.initialTagCount");
                    let shown = Application.prefs.get('extensions.hatenabookmark.addPanel.tagListShow').value;
                    if (!shown) {
                        this.tagSelectorGroup.setAttribute('hidden', true);
                        return;
                    }
                    this.tagSelectorGroup.removeAttribute('hidden');
                    let count = Application.prefs.get('extensions.hatenabookmark.addPanel.initialTagCount').value;
                    this.tagSelector.build(count);
                    let tags = this.inputHandler.inputLine.tags;
                    this.tagSelector.update(tags);
                ]]></body>
            </method>

            <method name="setAddOrEdit">
                <parameter name="add"/>
                <parameter name="bookmark"/>
                <body><![CDATA[
                    let type = add ? ".add" : ".edit";
                    document.title =
                        this.strings.get("title" + type);
                    this.dialog.getButton("accept").label =
                        this.strings.get("saveLabel" + type);
                    this.dialog.buttons =
                        add ? "accept,cancel" : "accept,cancel,extra2";
                    if (!add) {
                        let format = this.strings.get("dateFormat");
                        let date = bookmark.dateObject.toLocaleFormat(format);
                        let message = this.strings.get("alreadyBookmarked",
                                                       [date]);
                        this.messageField.value = message;
                    }
                    this.messageRow.hidden = add;
                ]]></body>
            </method>

            <method name="setError">
                <parameter name="message"/>
                <body><![CDATA[
                    this.errorField.value = message;
                    this.errorField.hidden = false;
                ]]></body>
            </method>

            <method name="clearError">
                <parameter name="message"/>
                <body><![CDATA[
                    this.errorField.hidden = true;
                ]]></body>
            </method>

            <method name="saveBookmark">
                <body><![CDATA[
                    let command = new hBookmark.RemoteCommand("edit", {
                        bookmark: this.bookmark,
                        changeTitle: this.isTitleChanged,
                        onError: let (self = this) function () {
                            let win = getTopWin();
                            //self.setError('error');
                            //self.show(bookmark);
                            //win.alert('error');
                            win.hBookmark.AddPanelManager.showPanel(bookmark);
                        }
                    });
                    command.execute();
                ]]></body>
            </method>

            <method name="deleteBookmark">
                <body><![CDATA[
                    let command = new hBookmark.RemoteCommand("delete", {
                        bookmark: this.bookmark,
                    });
                    command.execute();
                    this.hide();
                ]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="HB_TagChange"
                     action="this.tagSelector.update(this.inputHandler.inputLine.tags);"/>
            <handler event="HB_TagSelected"><![CDATA[
                this.inputHandler.inputLine.addTag(event.originalTarget.value);
                this.inputHandler.updateValue();
            ]]></handler>
            <handler event="HB_TagUnselected"><![CDATA[
                this.inputHandler.inputLine.deleteTag(event.originalTarget.value);
                this.inputHandler.updateValue();
            ]]></handler>
        </handlers>
    </binding>

    <binding id="tag-complete" extends="chrome://global/content/bindings/autocomplete.xml#autocomplete">
        <implementation implements="nsIObserver">
            <constructor><![CDATA[
                this.popup.__defineGetter__("overrideValue",
                                            this._popup_getOverrideValue);
                let os = hBookmark.ObserverService;
                os.addObserver(this, "autocomplete-will-enter-text", false);
                os.addObserver(this, "autocomplete-did-enter-text", false);
            ]]></constructor>

            <destructor><![CDATA[
                let os = hBookmark.ObserverService;
                os.removeObserver(this, "autocomplete-will-enter-text");
                os.removeObserver(this, "autocomplete-did-enter-text");
            ]]></destructor>

            <field name="_beforeTag">""</field>
            <field name="_afterTag">""</field>

            <field name="_isCompleting">false</field>
            <field name="_caretPos">0</field>

            <method name="_setSearchParam">
                <body><![CDATA[
                    let comment = this.value;
                    let caretPos = this.selectionStart;

                    let before = comment.substring(0, caretPos);
                    let after = comment.substring(caretPos);
                    let partialTag = "";
                    let match;
                    if ((match = /^(?:\[[^?%\/\[\]]+\])*\[([^?%\/\[\]]+)$/.exec(before))) {
                        partialTag = match[1];
                        before = before.slice(0, -partialTag.length);
                    }
                    if ((match = /^[^?%\/\[\]]*(?=\])/.exec(after))) {
                        partialTag += match[0];
                        after = after.substring(match[0].length);
                    } else {
                        after = "]" + after;
                    }

                    this._beforeTag = before;
                    this._afterTag = after;
                    this.searchParam = partialTag;
                    //hBookmark.p("[@_setSearchParam]", before, partialTag, after);
                ]]></body>
            </method>

            <method name="_popup_getOverrideValue">
                <body><![CDATA[
                    let input = this.input;
                    let tree = this.tree;
                    let col = tree.columns.getNamedColumn("treecolAutoCompleteValue");
                    return input._beforeTag +
                           tree.view.getCellText(tree.currentIndex, col) +
                           input._afterTag;
                ]]></body>
            </method>

            <method name="_adjustCaretPos">
                <body><![CDATA[
                    let pos = this.value.indexOf("]", this._caretPos);
                    if (pos !== -1)
                        this.setSelectionRange(pos + 1, pos + 1);
                ]]></body>
            </method>

            <method name="observe">
                <parameter name="subject"/>
                <parameter name="topic"/>
                <parameter name="data"/>
                <body><![CDATA[
                    if (subject !== this) return;
                    if (topic === "autocomplete-will-enter-text")
                        this._caretPos = this.selectionStart;
                    else
                        this._adjustCaretPos();
                ]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="input"
                     action="if (!this._isCompleting) this._setSearchParam();"/>
            <handler event="keypress" phase="capturing"
                     action="this._setSearchParam();"/>
        </handlers>
    </binding>

    <binding id="tag-selector">
        <implementation>
            <method name="build">
                <parameter name="count"/>
                <body><![CDATA[
                    let range = document.createRange();
                    range.selectNodeContents(this);
                    range.deleteContents();

                    if (count < 0) count = 0;
                    let tags = hBookmark.Model.Tag.findDistinctTags(count);
                    let fragment = document.createDocumentFragment();
                    tags.forEach(function (tag) {
                        let label = this._createTagLabel(tag);
                        fragment.appendChild(label);
                    }, this);
                    this.appendChild(fragment);
                ]]></body>
            </method>

            <method name="_createTagLabel">
                <parameter name="tag"/>
                <body><![CDATA[
                    let label = document.createElementNS(hBookmark.XUL_NS, "label");
                    label.setAttribute("class", "hBookmarkTag");
                    label.setAttribute("value", tag.name);
                    return label;
                ]]></body>
            </method>

            <method name="update">
                <parameter name="tagNames"/>
                <body><![CDATA[
                    let tagSet = {};
                    tagNames.forEach(function (t) tagSet[t] = true);
                    let selected = this.getElementsByAttribute("class", "hBookmarkSelectedTag");
                    Array.slice(selected).forEach(function (label) {
                        if (!(label.value in tagSet))
                            this._toggleLabel(label);
                    }, this);
                    tagNames.forEach(function (t) {
                        let label = this.getElementsByAttribute("value", t)[0];
                        if (label)
                            this._toggleLabel(label, true);
                    }, this);
                ]]></body>
            </method>

            <method name="_toggleLabel">
                <parameter name="label"/>
                <parameter name="forceSelect"/>
                <body><![CDATA[
                    label.className =
                        (label.className === "hBookmarkTag" || forceSelect)
                        ? "hBookmarkSelectedTag" : "hBookmarkTag";
                ]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="click"><![CDATA[
                let label = event.originalTarget;
                if (label.localName !== "label") return;
                this._toggleLabel(label);
                let tagEvent = document.createEvent("Event");
                let type = (label.className === "hBookmarkSelectedTag")
                           ? "HB_TagSelected" : "HB_TagUnselected";
                tagEvent.initEvent(type, true, false);
                label.dispatchEvent(tagEvent);
            ]]></handler>
        </handlers>
    </binding>

    <binding id="link"
             extends="chrome://global/content/bindings/text.xml#text-link">
        <implementation>
            <method name="open">
                <parameter name="event"/>
                <body><![CDATA[
                    let href = this.href;
                    if (!href || this.disabled || event.getPreventDefault())
                        return;
                    openUILink(href, event);
                ]]></body>
            </method>
        </implementation>
    </binding>

</bindings>
