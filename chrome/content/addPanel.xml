<?xml version="1.0" encoding="utf-8"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="add-panel"
             extends="chrome://global/content/bindings/popup.xml#panel">
        <content>
            <xul:toolbox>
                <xul:toolbar align="center">
                    <xul:label value="Add to Bookmark"/>
                    <xul:spacer flex="1"/>
                    <xul:toolbarbutton label="Close"
                                       oncommand="document.getBindingParent(this).hide();"/>
                </xul:toolbar>
            </xul:toolbox>
            <xul:grid>
                <xul:columns>
                    <xul:column/>
                    <xul:column flex="1"/>
                </xul:columns>
                <xul:rows>
                    <xul:row align="center">
                        <xul:label value="Title:"/>
                        <xul:hbox align="center">
                            <xul:textbox anonid="titleField" flex="1"/>
                            <xul:button anonid="editTitleButton"
                                        label="Edit Title…"
                                        oncommand="var panel = document.getBindingParent(this); panel.isTitleEditable = true; panel.titleField.focus();"/>
                            <xul:button anonid="cancelEditTitleButton"
                                        label="Cancel"
                                        oncommand="document.getBindingParent(this).isTitleEditable = false;"/>
                        </xul:hbox>
                    </xul:row>
                    <xul:row align="center">
                        <xul:label value="URL:"/>
                        <xul:label anonid="urlField" class="text-link hBookmarkLink"/>
                    </xul:row>
                    <xul:row align="center">
                        <xul:label value="Comment:"/>
                        <xul:textbox anonid="commentField"
                                     class="hBookmarkTagComplete"
                                     type="autocomplete"
                                     autocompletesearch="hbookmark-tag"/>
                    </xul:row>
                </xul:rows>
            </xul:grid>
            <xul:hbox>
                <xul:button anonid="addButton" label="Add to Bookmark"/>
                <xul:button anonid="saveButton" label="Save"/>
            </xul:hbox>
        </content>

        <implementation>
            <field name="titleField">
                document.getAnonymousElementByAttribute(this, "anonid", "titleField")
            </field>
            <field name="editTitleButton">
                document.getAnonymousElementByAttribute(this, "anonid", "editTitleButton")
            </field>
            <field name="cancelEditTitleButton">
                document.getAnonymousElementByAttribute(this, "anonid", "cancelEditTitleButton")
            </field>
            <field name="urlField">
                document.getAnonymousElementByAttribute(this, "anonid", "urlField")
            </field>
            <field name="commentField">
                document.getAnonymousElementByAttribute(this, "anonid", "commentField")
            </field>
            <field name="addButton">
                document.getAnonymousElementByAttribute(this, "anonid", "addButton")
            </field>
            <field name="saveButton">
                document.getAnonymousElementByAttribute(this, "anonid", "saveButton")
            </field>

            <field name="_bookmark">({ title: "", url: "", comment: "" })</field>
            <field name="_originalTitle">""</field>

            <property name="bookmark">
                <getter><![CDATA[
                    return hBookmark.extend(this._bookmark, {
                        title:   this.titleField.value,
                        url:     this.urlField.value,
                        comment: this.commentField.value
                    });
                ]]></getter>
                <setter><![CDATA[
                    if (val.url !== this._bookmark.url)
                        this.updateFields(val);
                    return this._bookmark = val;
                ]]></setter>
            </property>

            <property name="isOpen" readonly="true"
                      onget="return !this.collapsed;"/>

            <property name="isTitleEditable"
                      onget="return !this.titleField.readOnly;">
                <setter><![CDATA[
                    this.titleField.readOnly = !val;
                    this.editTitleButton.hidden = val;
                    this.cancelEditTitleButton.hidden = !val;
                    if (!val)
                        this.titleField.value = this._originalTitle;
                    return val;
                ]]></setter>
            </property>

            <property name="isTitleChanged" readonly="true"
                      onget="return this.titleField.value !== this._originalTitle;"/>

            <method name="show">
                <parameter name="bookmark"/>
                <body><![CDATA[
                    this.bookmark = bookmark;
                    this.setAddOrEdit(!!bookmark.temporary);
                    //this.clearError();
                    this.collapsed = false;
                ]]></body>
            </method>

            <method name="hide">
                <body><![CDATA[
                    this.collapsed = true;
                ]]></body>
            </method>

            <method name="updateFields">
                <parameter name="bookmark"/>
                <body><![CDATA[
                    this._originalTitle     = bookmark.title;
                    this.titleField.value   = bookmark.title;
                    this.isTitleEditable    = false;
                    this.urlField.value     = bookmark.url;
                    this.urlField.href      = bookmark.url;
                    this.commentField.value = bookmark.comment;
                ]]></body>
            </method>

            <method name="setAddOrEdit">
                <parameter name="add"/>
                <body><![CDATA[
                    this.addButton.hidden  = !add;
                    this.saveButton.hidden = add;
                    // XXX ToDo: ツールバーのタイトルも変更する。
                ]]></body>
            </method>

            <method name="addToBookmark">
                <body><![CDATA[
                    let bookmark = this.bookmark;
                    let query = {
                        url:     bookmark.url,
                        comment: bookmark.comment
                    };
                    if (this.isTitleChanged)
                        query.title = bookmark.title;
                    let command = new hBookmark.RemoteCommand("edit", {
                        query: query,
                        onError: let (self = this) function () {
                            //self.setError();
                            self.show(bookmark);
                        }
                    });
                    command.execute();
                    this.hide();
                ]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="command"><![CDATA[
                if (event.originalTarget === this.addButton ||
                    event.originalTarget === this.saveButton)
                    this.addToBookmark();
            ]]></handler>

            <handler event="keypress" phase="capturing"><![CDATA[
                let target = document.getBindingParent(event.originalTarget);
                if (target.localName !== "textbox" ||
                    (target.type === "autocomplete" && target.popupOpen) ||
                    event.ctrlKey || event.shiftKey ||
                    event.altKey || event.metaKey)
                    return;

                switch (event.keyCode) {
                case KeyEvent.DOM_VK_RETURN:
                    this.addButton.doCommand();
                    break;

                case KeyEvent.DOM_VK_ESCAPE:
                    this.hide();
                    break;

                default:
                    return;
                }
                event.preventDefault();
                event.stopPropagation();
            ]]></handler>
        </handlers>
    </binding>

    <binding id="tag-complete" extends="chrome://global/content/bindings/autocomplete.xml#autocomplete">
        <implementation implements="nsIObserver">
            <constructor><![CDATA[
                this.popup.__defineGetter__("overrideValue",
                                            this._popup_getOverrideValue);
                let os = hBookmark.ObserverService;
                os.addObserver(this, "autocomplete-will-enter-text", false);
                os.addObserver(this, "autocomplete-did-enter-text", false);
            ]]></constructor>

            <destructor><![CDATA[
                let os = hBookmark.ObserverService;
                os.removeObserver(this, "autocomplete-will-enter-text");
                os.removeObserver(this, "autocomplete-did-enter-text");
            ]]></destructor>

            <field name="_beforeTag">""</field>
            <field name="_afterTag">""</field>

            <field name="_isCompleting">false</field>
            <field name="_caretPos">0</field>

            <method name="_setSearchParam">
                <body><![CDATA[
                    let comment = this.value;
                    let caretPos = this.selectionStart;

                    let before = comment.substring(0, caretPos);
                    let after = comment.substring(caretPos);
                    let partialTag = "";
                    let match;
                    if ((match = /^(?:\[[^?%\/\[\]]+\])*\[([^?%\/\[\]]+)$/.exec(before))) {
                        partialTag = match[1];
                        before = before.slice(0, -partialTag.length);
                    }
                    if ((match = /^[^?%\/\[\]]*(?=\])/.exec(after))) {
                        partialTag += match[0];
                        after = after.substring(match[0].length);
                    } else {
                        after = "]" + after;
                    }

                    this._beforeTag = before;
                    this._afterTag = after;
                    this.searchParam = partialTag;
                    //hBookmark.p("[@_setSearchParam]", before, partialTag, after);
                ]]></body>
            </method>

            <method name="_popup_getOverrideValue">
                <body><![CDATA[
                    let input = this.input;
                    let tree = this.tree;
                    let col = tree.columns.getNamedColumn("treecolAutoCompleteValue");
                    return input._beforeTag +
                           tree.view.getCellText(tree.currentIndex, col) +
                           input._afterTag;
                ]]></body>
            </method>

            <method name="_adjustCaretPos">
                <body><![CDATA[
                    let pos = this.value.indexOf("]", this._caretPos);
                    if (pos !== -1)
                        this.setSelectionRange(pos + 1, pos + 1);
                ]]></body>
            </method>

            <method name="observe">
                <parameter name="subject"/>
                <parameter name="topic"/>
                <parameter name="data"/>
                <body><![CDATA[
                    if (subject !== this) return;
                    if (topic === "autocomplete-will-enter-text")
                        this._caretPos = this.selectionStart;
                    else
                        this._adjustCaretPos();
                ]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="input"
                     action="if (!this._isCompleting) this._setSearchParam();"/>
            <handler event="keypress" phase="capturing"
                     action="this._setSearchParam();"/>
        </handlers>
    </binding>

    <binding id="link"
             extends="chrome://global/content/bindings/text.xml#text-link">
        <implementation>
            <method name="open">
                <parameter name="event"/>
                <body><![CDATA[
                    let href = this.href;
                    if (!href || this.disabled || event.getPreventDefault())
                        return;
                    openUILink(href, event);
                ]]></body>
            </method>
        </implementation>
    </binding>

</bindings>
