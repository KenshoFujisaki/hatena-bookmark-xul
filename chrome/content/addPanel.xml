<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="addPanel">
        <content>
            <vbox xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
                  flex="1" style="height: 20em;">
                <grid>
                    <columns>
                        <column/>
                        <column flex="1"/>
                    </columns>
                    <rows>
                        <row>
                            <label>タイトル:</label>
                            <textbox anonid="title" readonly="true"/>
                        </row>
                        <row>
                            <label>URL:</label>
                            <label anonid="url" class="text-link"/>
                        </row>
                        <row>
                            <label>コメント:</label>
                            <textbox anonid="comment" type="autocomplete"
                                     class="hbookmark-commenttextbox"
                                     autocompletesearch="hbookmark-tag"
                                     showcommentcolumn="true"
                                     ontextentered="this.adjustCaret(true);"
                                     onsearchcomplete="this.memoCaret();"/>
                        </row>
                    </rows>
                </grid>

                <hbox>
                    <button label="追加する"/>
                </hbox>

                <vbox class="hbookmark-taglist"/>
            </vbox>
        </content>

        <implementation>
            <field name="view">null</field>
            <field name="targetBrowser">null</field>

            <field name="_titleField">
                document.getAnonymousElementByAttribute(this, "anonid", "title")
            </field>
            <field name="_urlField">
                document.getAnonymousElementByAttribute(this, "anonid", "url")
            </field>
            <field name="_commentField">
                document.getAnonymousElementByAttribute(this, "anonid", "comment")
            </field>

            <!-- XXX This should be false -->
            <field name="_isOpen">true</field>
            <property name="isOpen" readonly="true"
                      onget="return this._isOpen"/>

            <method name="toggle">
                <body>
                <![CDATA[
                    let wasOpen = this.isOpen;
                    if (!wasOpen) {
                        this.view.setup(this.targetBrowser.contentWindow);
                        this._update();
                    }
                    this.collapsed = wasOpen;
                    this._isOpen = !wasOpen;
                ]]>
                </body>
            </method>

            <method name="_update">
                <body>
                <![CDATA[
                    this._titleField.value = this.view.title;
                    this._urlField.value = this.view.url;
                    this._urlField.setAttribute("href", this.view.url);
                    this._commentField.value = this.view.comment;
                ]]>
                </body>
            </method>
        </implementation>
    </binding>


    <!-- XXX commentTextbox.xml の内容をここに -->


    <binding id="tagList">
        <content>
            <hbox anonid="first-line"/>
        </content>

        <implementation>
            <field name="_firstLine">
                document.getAnonymousElementByAttribute(this, "anonid", "first-line")
            </field>

            <method name="reset">
                <body><![CDATA[
                    let range = document.createRange();
                    range.selectNodeContents(this);
                    range.setStartAfter(this._firstLine);
                    range.deleteContents();
                    range.selectNodeContents(this._firstLine);
                    range.deleteContents();

                    let checkboxes = document.createDocumentFragment();
                    let tags = hBookmark.Model.Tag.findDistinctTags();
                    tags.forEach(function (tag) {
                        let checkbox = document.createElementNS(
                            hBookmark.XUL_NS, "checkbox");
                        checkbox.setAttribute("label", tag.name);
                        checkboxes.appendChild(checkbox);
                    });
                    this._firstLine.appendChild(checkboxes);
                    this.reflow();
                ]]></body>
            </method>

            <method name="reflow">
                <body><![CDATA[
                    // XXX rtl環境に未対応
                    let width = this.boxObject.width;
                    hBookmark.p
                    let line = this._firstLine;
                    let box = line.firstChild;
                    while (box) {
                        if (box.boxObject.right > width &&
                            box.previousSibling) {
                            let nextLine = document.createElementNS(
                                hBookmark.XUL_NS, "hbox");
                            let range = document.createRange();
                            range.selectNodeContents(line);
                            range.setStartBefore(box);
                            nextLine.appendChild(range.extractContents());
                            this.appendChild(nextLine);
                            line = nextLine;
                        }
                        box = box.nextSibling;
                    }
                ]]></body>
            </method>
        </implementation>
    </binding>

</bindings>
