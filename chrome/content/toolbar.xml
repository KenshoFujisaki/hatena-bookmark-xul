<?xml version="1.0" encoding="utf-8"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="toolbar" extends="chrome://hatenabookmark/content/toolbar.xml#toolbar-base">
        <content>
            <xul:toolbarbutton label="Hello"/>
            <xul:hbox anonid="recent-container" flex="1">
                <xul:hbox anonid="body" flex="1"/>
                <xul:toolbarbutton anonid="chevron" class="chevron" type="menu">
                    <xul:menupopup anonid="popup"/>
                </xul:toolbarbutton>
            </xul:hbox>
        </content>

        <implementation implements="nsIDOMEventListener">
            <constructor><![CDATA[
                // resize/BookmarkChangedイベントに自身を結びつける。
                window.addEventListener("resize", this, false);
                this._build();
            ]]></constructor>

            <field name="_recentContainer">
                document.getAnonymousElementByAttribute(this, "anonid", "recent-container")
            </field>
            <field name="_body">
                document.getAnonymousElementByAttribute(this, "anonid", "body")
            </field>
            <field name="_chevron">
                document.getAnonymousElementByAttribute(this, "anonid", "chevron")
            </field>
            <field name="_popup">
                document.getAnonymousElementByAttribute(this, "anonid", "popup")
            </field>

            <method name="_build">
                <body><![CDATA[
                    let range = document.createRange();
                    range.selectNodeContents(this._body);
                    range.deleteContents();
                    range.selectNodeContents(this._popup);
                    range.deleteContents();

                    let count = hBookmark.Prefs.bookmark.get("recentItemCount");
                    let bookmarks = hBookmark.Model.Bookmark.findRecent(count);
                    bookmarks.forEach(function (bookmark) {
                        let button = this._createToolbarButton(bookmark);
                        this._body.appendChild(button);
                        let item = this._createMenuItem(bookmark);
                        this._popup.appendChild(item);
                    }, this);
                    this._redraw();
                ]]></body>
            </method>

            <method name="_redraw">
                <body><![CDATA[
                    hBookmark.p('redraw');
                    Array.forEach(this._body.childNodes,
                                  function (button) button.hidden = false);
                    this._chevron.hidden = false;

                    let leftSize = this.boxObject.width;
                    for (let child = this.boxObject.firstChild;
                         child;
                         child = child.boxObject.nextSibling) {
                        if (child !== this._recentContainer)
                            leftSize -= this._getMarginBoxWidth(child);
                    }
                    let chevronSize = this._getMarginBoxWidth(this._chevron);
                    let visibleCount = 0;
                    let button = this._body.firstChild;
                    while (button) {
                        let nextButton = button.nextSibling;
                        leftSize -= this._getMarginBoxWidth(button);
                        if (leftSize < (nextButton ? chevronSize : 0)) break;
                        visibleCount++;
                        button = nextButton;
                    }
                    this._chevron.hidden = !button;
                    Array.forEach(this._body.childNodes, function (button, i) {
                        button.hidden = (i >= visibleCount);
                    });
                    Array.forEach(this._popup.childNodes, function (item, i) {
                        item.hidden = (i < visibleCount);
                    });
                ]]></body>
            </method>

            <method name="_getMarginBoxWidth">
                <parameter name="element"/>
                <body><![CDATA[
                    let style = getComputedStyle(element, null);
                    return element.boxObject.width +
                        parseInt(style.marginLeft) +
                        parseInt(style.marginRight);
                ]]></body>
            </method>

            <method name="handleEvent">
                <parameter name="event"/>
                <body><![CDATA[
                    switch (event.type) {
                    case "(bookmark added)":
                        this._build();
                        break;

                    case "resize":
                        if (event.target === window)
                            this._redraw();
                        break;
                    }
                ]]></body>
            </method>
        </implementation>
    </binding>

    <binding id="toolbar-base">
        <implementation>
            <method name="_createToolbarButton">
                <parameter name="bookmark"/>
                <body><![CDATA[
                    let button = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
                                                          "toolbarbutton");
                    button.setAttribute("class", "bookmark-item");
                    button.setAttribute("label", bookmark.title);
                    button.bookmark = bookmark;
                    return button;
                ]]></body>
            </method>

            <method name="_createMenuItem">
                <parameter name="bookmark"/>
                <body><![CDATA[
                    let item = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
                                                        "menuitem");
                    item.setAttribute("class", "bookmark-item menuitem-iconic");
                    item.setAttribute("label", bookmark.title);
                    item.bookmark = bookmark;
                    return item;
                ]]></body>
            </method>
        </implementation>
    </binding>

</bindings>
