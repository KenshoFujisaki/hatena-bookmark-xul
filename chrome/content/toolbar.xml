<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE bindings SYSTEM "chrome://hatenabookmark/locale/toolbar.dtd" [
    <!ENTITY % browser SYSTEM "chrome://hatenabookmark/locale/browser.dtd">
    %browser;
]>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="recent-line">
        <content flex="1">
            <xul:hbox class="hBookmark-toolbar-dynamic-items" flex="1">
                <xul:toolbarbutton anonid="loginButton"
                                   class="bookmark-item"
                                   label="&hBookmark.toolbar.loginLabel;"
                                   hidden="true"
                                   oncommand="hBookmark.UIUtils.openLogin(event);"
                                   onclick="checkForMiddleClick(this, event);"/>
                <xul:toolbarbutton anonid="addPageButton"
                                   class="bookmark-item"
                                   label="&hBookmark.toolbar.addBookmarkLabel;"
                                   hidden="true"
                                   oncommand="hBookmark.UIUtils.openAddBookmark(event);"
                                   onclick="checkForMiddleClick(this, event);"/>
                <xul:hbox anonid="body"
                          tooltip="hBookmarkItemTooltip"
                          context="hBookmarkEntryContext"/>
                <xul:toolbarspring/>
                <xul:toolbarbutton anonid="chevron" class="chevron" type="menu">
                    <xul:menupopup anonid="popup"
                                   class="hBookmark-toolbar-recent-popup"/>
                </xul:toolbarbutton>
            </xul:hbox>
            <children/>
        </content>

        <implementation implements="nsIDOMEventListener">
            <constructor><![CDATA[
                let method = hBookmark.method;
                this._listeners = [
                    hBookmark.EventService.createListener("BookmarksUpdated",
                        method(this, "build")),
                    hBookmark.EventService.createListener("UserChange",
                        method(this, "build")),
                    hBookmark.Prefs.bookmark.createListener("recentItemCount",
                        method(this, "build")),
                ];
                window.addEventListener("resize", this, false);
                // XXX コンストラクタ呼び出し時にはデータを取得できない……。
                //this.build();
                setTimeout(method(this, "build"), 500);
            ]]></constructor>

            <destructor><![CDATA[
                this._listeners.forEach(function (l) l.unlisten());
                this._listeners = null;
                window.removeEventListener("resize", this, false);
            ]]></destructor>

            <field name="_listeners">null</field>

            <field name="loginButton">
                document.getAnonymousElementByAttribute(this, "anonid", "loginButton")
            </field>
            <field name="addPageButton">
                document.getAnonymousElementByAttribute(this, "anonid", "addPageButton")
            </field>
            <field name="body">
                document.getAnonymousElementByAttribute(this, "anonid", "body")
            </field>
            <field name="chevron">
                document.getAnonymousElementByAttribute(this, "anonid", "chevron")
            </field>
            <field name="popup">
                document.getAnonymousElementByAttribute(this, "anonid", "popup")
            </field>

            <method name="build">
                <body><![CDATA[
                    hBookmark.UIUtils.deleteContents(this.body);
                    let bookmarks;
                    try {
                        bookmarks = hBookmark.Model.Bookmark.findRecent();
                    } catch (ex) {
                        bookmarks = [];
                    }
                    bookmarks.forEach(function (bookmark) {
                        let button = this._createToolbarButton(bookmark);
                        this.body.appendChild(button);
                    }, this);

                    let loggedin = !!hBookmark.User.user;
                    this.loginButton.hidden = loggedin;
                    this.addPageButton.hidden = !loggedin || !!bookmarks.length;
                    this.chevron.hidden = !bookmarks.length;
                    this.redraw();
                ]]></body>
            </method>

            <method name="_createToolbarButton">
                <parameter name="bookmark"/>
                <body><![CDATA[
                    let button = document.createElementNS(hBookmark.XUL_NS,
                                                          "toolbarbutton");
                    button.setAttribute("class", "bookmark-item");
                    button.setAttribute("label", bookmark.title);
                    button.setAttribute("image", hBookmark.favicon(bookmark.url));
                    button.bookmark = bookmark;
                    return button;
                ]]></body>
            </method>

            <method name="redraw">
                <body><![CDATA[
                    hBookmark.p('toolbar redraw');
                    this.chevron.hidden = false;
                    let availableWidth = this.boxObject.width;
                    let chevronWidth = this._getMarginBoxWidth(this.chevron);
                    let buttonsWidth = 0;
                    let visibleCount = 0;
                    let button = this.body.firstChild;
                    while (button) {
                        button.hidden = false;
                        buttonsWidth += this._getMarginBoxWidth(button);
                        let nextButton = button.nextSibling;
                        if (buttonsWidth + (nextButton ? chevronWidth : 0)
                                > availableWidth)
                            break;
                        visibleCount++;
                        button = nextButton;
                    }
                    Array.slice(this.body.childNodes, visibleCount)
                         .forEach(function (button) button.hidden = true);
                    this.chevron.hidden = !button;
                    this.popup.hiddenCount = visibleCount;
                ]]></body>
            </method>

            <method name="_getMarginBoxWidth">
                <parameter name="element"/>
                <body><![CDATA[
                    let style = getComputedStyle(element, null);
                    return element.boxObject.width +
                        parseInt(style.marginLeft) +
                        parseInt(style.marginRight);
                ]]></body>
            </method>

            <method name="handleEvent">
                <parameter name="event"/>
                <body><![CDATA[
                    // XXX 表示→非表示→リサイズ→再度表示のときに
                    // 配置が更新されない。
                    if (event.type === "resize" &&
                        event.target === window && this._isVisible())
                        this.redraw();
                ]]></body>
            </method>

            <method name="_isVisible">
                <body><![CDATA[
                    let toolbar = this.parentNode;
                    while (toolbar &&
                           !(toolbar.namespaceURI === hBookmark.XUL_NS &&
                             toolbar.localName === "toolbar"))
                        toolbar = toolbar.parentNode;
                    return !!toolbar && !toolbar.collapsed;
                ]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="command"
                     action="hBookmark.UIUtils.onBookmarkCommand(event);"/>
            <handler event="click"
                     action="hBookmark.UIUtils.onBookmarkClick(event);"/>
        </handlers>
    </binding>

    <binding id="recent-popup"
             extends="chrome://global/content/bindings/popup.xml#popup">
        <content context="hBookmarkEntryContext"
                 tooltip="hBookmarkItemTooltip">
        </content>

        <implementation>
            <field name="hiddenCount">0</field>

            <method name="build">
                <body><![CDATA[
                    hBookmark.UIUtils.deleteContents(this);
                    let bookmarks;
                    try {
                        bookmarks = hBookmark.Model.Bookmark.findRecent();
                    } catch (ex) {
                        return;
                    }
                    bookmarks = bookmarks.slice(this.hiddenCount);
                    bookmarks.forEach(function (bookmark, i) {
                        let menuItem = this._createMenuItem(bookmark);
                        this.appendChild(menuItem);
                    }, this);
                ]]></body>
            </method>

            <method name="_createMenuItem">
                <parameter name="bookmark"/>
                <body><![CDATA[
                    let item = document.createElementNS(hBookmark.XUL_NS,
                                                        "menuitem");
                    item.setAttribute("class", "bookmark-item menuitem-iconic");
                    item.setAttribute("label", bookmark.title);
                    item.setAttribute("image", hBookmark.favicon(bookmark.url));
                    item.bookmark = bookmark;
                    return item;
                ]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="popupshowing" action="this.build();"/>
        </handlers>
    </binding>

</bindings>
